<?xml version="1.0"?>
<!DOCTYPE sdmetricsmetamodel SYSTEM 'metamodel.dtd'>

<!-- metamodel.xml

SDMetrics V2.1 default metamodel definition file for UML1.x
Copyright (c) 2002-2020 Juergen Wuest

The MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this SDMetrics project file (the "Project File"), to deal in the Project File 
without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Project File, and to permit persons to whom the Project File is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Project File.

THE PROJECT FILE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE PROJECT FILE.

Note: this license grant only applies to this Project File, and not to any
other part of SDMetrics.

-->

<sdmetricsmetamodel version="2.0">


<modelelement name="sdmetricsbase">
	<attribute name="context" type="ref">Owner of the element in the UML model.</attribute>
	<attribute name="id" type="data">Unique identifier of the model element.</attribute>
	<attribute name="name" type="data">Name of the element in UML model.</attribute>
	<attribute name="stereotypes" type="ref" multiplicity="many">The stereotypes of the model element.</attribute>
</modelelement>


<!-- classes, interfaces, attributes, operations -->
<modelelement name="class">
	<attribute name="visibility" type="data">Visibility of the class (public, private, protected, package).</attribute>
	<attribute name="abstract" type="data">Boolean indicating if class is abstract.</attribute>
	<attribute name="leaf" type="data">Boolean indicating if a class must not have subclasses.</attribute>
</modelelement>
<modelelement name="interface" />
<modelelement name="datatype" />
<modelelement name="attribute">
	<attribute name="visibility" type="data">Visibility of the attribute (public, private, protected, package).</attribute>
	<attribute name="attributetype" type="ref">Reference to the attribute type (class, data type etc).</attribute>
	<attribute name="changeability" type="data">Changeability of the attribute (changeable or none, frozen, addOnly).</attribute>
</modelelement>

<modelelement name="operation">
	<attribute name="visibility" type="data">Visibility of the operation (public, private, protected, package).</attribute>
	<attribute name="abstract" type="data">Boolean indicating if operation is abstract.</attribute>
	<attribute name="isquery" type="data">Boolean indicating if operation is a query that does not change the classifier's state.</attribute>
</modelelement>
<modelelement name="parameter">
	<attribute name="kind" type="data">The kind of parameter (in, out, inout, return).</attribute>
	<attribute name="parametertype" type="ref">Reference to the parameter type (class, data type etc).</attribute>
</modelelement>
<modelelement name="method"/>

<!-- models, packages, subsystems -->
<modelelement name="model" />
<modelelement name="package" />
<modelelement name="subsystem" />

<!-- relationships: association, generalization, ... -->
<modelelement name="association">

</modelelement>
<modelelement name="associationclass"/>
<modelelement name="associationend">
	<attribute name="navigable" type="data">Boolean indicating if the association end is navigable.</attribute>

	<attribute name="aggregation" type="data">Indicates if the association end is an aggregation or composite.</attribute>

	<attribute name="associationendtype" type="ref">A link to the element attached to the association end.</attribute>
</modelelement>
<modelelement name="generalization">
	<attribute name="genchild" type="ref">Link to the child in the generalization.</attribute>
	<attribute name="genparent" type="ref">Link to the parent in the generalization.</attribute>
</modelelement>
<modelelement name="abstraction">
	<attribute name="abssupplier" type="ref">Link to the interface.</attribute>
	<attribute name="absclient" type="ref">Link to the element implementing the interface</attribute>
</modelelement>
<modelelement name="dependency">
	<attribute name="depsupplier" type="ref">Link to the supplier of the dependency.</attribute>
	<attribute name="depclient" type="ref">Link to the client of the dependency.</attribute>
</modelelement>
<modelelement name="usage">
	<attribute name="depsupplier" type="ref">Link to the supplier of the usage.</attribute>
	<attribute name="depclient" type="ref">Link to the client of the usage.</attribute>
</modelelement>


<!-- objects, stimuli, links-->
<modelelement name="object">
	<attribute name="objtype" type="ref">Link to the element of which this object is an instance.</attribute>
</modelelement>
<modelelement name="stimulus">
	<attribute name="stimsender" type="ref">Sender of the stimulus.</attribute>
	<attribute name="stimreceiver" type="ref">Receiver of the stimulus.</attribute>
	<attribute name="stimaction" type="ref">The action that the stimulus dispatches.</attribute>
</modelelement>
<modelelement name="link"/>
<modelelement name="linkend">
	<attribute name="linkendtype" type="ref">The element that is attached to the link end.</attribute>
</modelelement>

<!-- classifierroles, messages -->
<modelelement name="collaboration"/>
<modelelement name="classifierrole">
	<attribute name="classifierbase" type="ref">The classifier which the classifier role is a view of.</attribute>
</modelelement>

<modelelement name="interaction"/>
<modelelement name="message">
	<attribute name="messagesender" type="ref">The sender of the message.</attribute>
	<attribute name="messagereceiver" type="ref">The receiver of the message.</attribute>
	<attribute name="messageaction" type="ref">The action that the message dispatches.</attribute>
</modelelement>



<!-- state machines -->
<modelelement name="statemachine"/>
<modelelement name="sdmetricsabstractstate"> <!-- convenience model element with default XMI transformations for all states -->
  <attribute name="entryaction" type="ref" multiplicity="many">The entry actions of the state.</attribute>
  <attribute name="exitaction" type="ref" multiplicity="many">The exit actions of the state.</attribute>
  <attribute name="doactivity" type="ref" multiplicity="many">The do actions of the state.</attribute>
  <attribute name="internaltrans" type="ref" multiplicity="many">The internal transitions of the state.</attribute>
</modelelement>
<modelelement name="state" parent="sdmetricsabstractstate">
	<attribute name="kind" type="data">The kind of state (simple, composite, submachine, stub, synch, final; initial, deepHistory, shallowHistory, join, fork, choice or branch, junction; action, objectflow, call, subactivity).</attribute>
	<attribute name="isconcurrent" type="data">Indicates if a composite state is concurrent.</attribute>
</modelelement>
<modelelement name="transition">
	<attribute name="transsource" type="ref">The source state of the transition.</attribute>
	<attribute name="transtarget" type="ref">The target state of the transition.</attribute>
	<attribute name="trigger" type="ref">The event that triggers the transition.</attribute>
</modelelement>
<modelelement name="event">
	<attribute name="kind" type="data">The kind of event (signal, call, change, time).</attribute>
	<attribute name="linkedeventelement" type="ref">The element (signal, operation, boolean expression, or deadline) that raised the event.</attribute>
</modelelement>
<modelelement name="action">
	<attribute name="kind" type="data">The kind of action (send, return, create, destroy, call, terminate, uninterpreted).</attribute>
	<attribute name="linkedactionelement" type="ref">Depending on the kind of action, the operation or signal that is invoked when the action is executed, or the classifier of which an instance is created.</attribute>
</modelelement>
<modelelement name="guard"/>

<!-- Partitions for activity graphs. -->
<modelelement name="partition">
  <attribute name="contents" type="ref" multiplicity="many">The elements contained in the swimlane.</attribute>
</modelelement>	


<!-- activity graphs -->
<modelelement name="activitygraph"/>
<modelelement name="signal"/>

<!-- use case model -->
<modelelement name="usecase"/>
<modelelement name="actor"/>
<modelelement name="usecaseextend">
	<attribute name="usecaseextbase" type="ref">The use case that is extended.</attribute>
	<attribute name="usecaseextension" type="ref">The use case that is the extension.</attribute>
	<attribute name="usecaseextensionpoint" type="ref">The extension point in the extended use case.</attribute>
</modelelement>
<modelelement name="usecaseinclude">
	<attribute name="usecaseincbase" type="ref">The including use case.</attribute>
	<attribute name="usecaseaddition" type="ref">The included use case.</attribute>
</modelelement>
<modelelement name="extensionpoint">
</modelelement>


<!-- components, nodes -->
<modelelement name="component">
	<attribute name="deploymentlocation" type="ref">The node on which the component is deployed.</attribute>
</modelelement>
<modelelement name="componentinstance">
	<attribute name="componenttype" type="ref">The component that is instantiated.</attribute>
</modelelement>
<modelelement name="node"/>
<modelelement name="nodeinstance">
	<attribute name="nodetype" type="ref">The node that is instantiated.</attribute>
</modelelement>




<!-- Extension mechanisms: stereotypes, tagged values -->
<modelelement name="stereotype">
  <attribute name="extendedelements" type="ref" multiplicity="many">The set of elements that the stereotype extends.</attribute>
</modelelement>
	
<modelelement name="taggedvalue">
	<attribute name="tag" type="data">The tag of the tagged value (up to UML 1.3)</attribute>
	<attribute name="definition" type="ref">Definition of the tagged value (since UML 1.4)</attribute>
	<attribute name="value" type="data">The value of the tagged value.</attribute>
</modelelement>

<modelelement name="tagdefinition">
	<attribute name="tagtype" type="data">The tag name of a tagged value's tag.</attribute>
</modelelement>


<!-- UML diagram information -->
<modelelement name="diagram" >
	 <attribute name="type" type="data">The type of diagram (class diagram, sequence diagram, etc).</attribute>
</modelelement>

<modelelement name="diagramelement" >
	 <attribute name="element" type="ref">The element that is shown on the diagram.</attribute>
</modelelement>





</sdmetricsmetamodel>

